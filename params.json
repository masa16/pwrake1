{"name":"Pwrake","tagline":"Parallel workflow extension for Rake","body":"# Pwrake\r\n\r\nParallel workflow extension for Rake\r\n* Author: Masahiro Tanaka\r\n\r\n([README in Japanese](https://github.com/masa16/pwrake/wiki/Pwrake.ja)),\r\n([GitHub Repository](https://github.com/masa16/pwrake))\r\n\r\n## Features\r\n\r\n* Parallelize all tasks; no need to modify Rakefile, no need to use `multitask`.\r\n* Tasks are executed in the given number of worker threads.\r\n* Remote exuecution using SSH.\r\n* Pwrake is an extension to Rake, not patch to Rake: Rake and Pwrake coexist.\r\n* High parallel I/O performance using Gfarm file system.\r\n\r\n## Installation\r\n\r\nDownload source tgz/zip and expand, cd to subdir and install:\r\n\r\n    $ ruby setup.rb\r\n\r\nOr, gem install:\r\n\r\n    $ gem install pwrake\r\n\r\n## Usage\r\n\r\n### Parallel execution using 4 cores at localhost:\r\n\r\n    $ pwrake -j 4\r\n\r\n### Parallel execution using all cores at localhost:\r\n\r\n    $ pwrake -j\r\n\r\n### Parallel execution using total 2*2 cores at remote 2 hosts:\r\n\r\n1. Share your directory among remote hosts via distributed file system such as NFS, Gfarm.\r\n2. Allow passphrase-less access via SSH in either way:\r\n   * Add passphrase-less key generated by `ssh-keygen`.  (Be careful)\r\n   * Add passphrase using `ssh-add`.\r\n3. Make `hosts` file in which remote host names and the number of cores are listed:\r\n\r\n        $ cat hosts\r\n        host1 2\r\n        host2 2\r\n\r\n4. Run `pwrake` with an option `--hostfile` or `-F`:\r\n\r\n        $ pwrake --hostfile=hosts\r\n\r\n## Options\r\n\r\n### Command line option\r\n\r\n        -F, --hostfile FILE              [Pw] Read hostnames from FILE\r\n        -j, --jobs [N]                   [Pw] Number of threads at localhost (default: # of processors)\r\n        -L, --logfile [FILE]             [Pw] Write log to FILE\r\n            --ssh-opt, --ssh-option OPTION\r\n                                         [Pw] Option passed to SSH\r\n            --filesystem FILESYSTEM      [Pw] Specify FILESYSTEM (nfs|gfarm)\r\n            --gfarm                      [Pw] FILESYSTEM=gfarm\r\n        -A, --disable-affinity           [Pw] Turn OFF affinity (AFFINITY=off)\r\n        -S, --disable-steal              [Pw] Turn OFF task steal\r\n        -d, --debug                      [Pw] Output Debug messages\r\n            --pwrake-conf [FILE]         [Pw] Pwrake configuation file in YAML\r\n            --show-conf, --show-config   [Pw] Show Pwrake configuration options\r\n            --report LOG                 [Pw] Report profile HTML from LOG and exit.\r\n\r\n### pwrake_conf.yaml\r\n\r\n* If `pwrake_conf.yaml` exists at current directory, Pwrake reads options from it.\r\n* Example (in YAML form):\r\n\r\n        HOSTFILE : hosts\r\n        LOGFILE : true\r\n        TASKLOG : true\r\n        PROFILE : true\r\n        GNU_TIME : true\r\n        PLOT_PARALLELISM : true\r\n        DISABLE_AFFINITY: true\r\n        DISABLE_STEAL: true\r\n        FAILED_TARGET : delete\r\n        PASS_ENV :\r\n         - ENV1\r\n         - ENV2\r\n\r\n* Option list:\r\n\r\n        HOSTFILE, HOSTS   default=false\r\n        LOGFILE, LOG      default=none, string=filename, true=\"Pwrake%Y%m%d-%H%M%S_%$.log\"\r\n        TASKLOG           default=none, string=filename, true=\"Pwrake%Y%m%d-%H%M%S_%$.task\"\r\n        PROFILE           default=none, string=filename, true=\"Pwrake%Y%m%d-%H%M%S_%$.csv\"\r\n        WORK_DIR          default=$PWD\r\n        FILESYSTEM        default=nil (autodetect)\r\n        SSH_OPTION        (String) SSH option\r\n        PASS_ENV          (Array) Environment variables passed to SSH\r\n        GNU_TIME          If true, obtains PROFILEs using GNU time\r\n        PLOT_PARALLELISM  If true, plot parallelism using GNUPLOT\r\n        FAILED_TARGET     ( rename(default) | delete | leave ) failed files\r\n        QUEUE_PRIORITY          RANK(default), FIFO, LIFO, LIHR\r\n        NOACTION_QUEUE_PRIORITY FIFO(default), LIFO, RAND\r\n        NUM_NOACTION_THREADS    default=4 when gfarm, else 1\r\n        THREAD_CREATE_INTERVAL  default=0.01 (sec)\r\n        HALT_QUEUE_WHILE_SEARCH true|false\r\n        GRAPH_PARTITION         true|false\r\n\r\n  for Gfarm system:\r\n\r\n        DISABLE_AFFINITY  default=false\r\n        DISABLE_STEAL     default=false\r\n        STEAL_WAIT        default=0 (sec)\r\n        STEAL_WAIT_MAX    default=10 (sec)\r\n         : Wait min(STEAL_WAIT*2**n, STEAL_WAIT_MAX) sec for task steal.\r\n        GFARM_BASEDIR     default=\"/tmp\"\r\n        GFARM_PREFIX      default=\"pwrake_$USER\"\r\n        GFARM_SUBDIR      default='/'\r\n        MAX_GFWHERE_WORKER  default=8\r\n\r\n## Note for Gfarm\r\n\r\n* `gfwhere-pipe` script (included in Pwrake) is used for file-affinity scheduling.\r\n  This script requires Ruby/FFI (https://github.com/ffi/ffi). Install FFI by\r\n\r\n        gem install ffi\r\n\r\n## For Graph Partitioning\r\n\r\n* Compile and Install METIS 5.1.0 (http://www.cs.umn.edu/~metis/). This requires CMake.\r\n\r\n* Install RbMetis (https://github.com/masa16/rbmetis) by\r\n\r\n        gem install rbmetis -- \\\r\n         --with-metis-include=/usr/local/include \\\r\n         --with-metis-lib=/usr/local/lib\r\n\r\n## Tested Platform\r\n\r\n* Ruby 2.1.4\r\n* Rake 10.1.0\r\n* CentOS 6.4\r\n\r\n## Acknowledgment\r\n\r\nThis work is supported by\r\n* JST CREST, research area: \"Development of System Software Technologies for Post-Peta Scale High Performance Computing,\" and\r\n* MEXT Promotion of Research for Next Generation IT Infrastructure \"Resources Linkage for e-Science (RENKEI).\"\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}